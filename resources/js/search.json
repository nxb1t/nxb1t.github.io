[[{"l":"Home","p":["Hello everyone, Welcome to my Research blog, here I will be sharing my latest findings and ideas in the fields of Digital Forensics and Malware analysis. I also have another blog where I post CTF writeups and other tutorials, which you can find by clicking the button below.","CTF Writeups"]},{"i":"who-am-i-","l":"Who Am I ?","p":["I am Nashid P (nxb1t), a Second Year BSc Computer Science student from Kerala, India. I am a passionate blogger who enjoys writing about my experiences in CTF competitions, as well as my insights and discoveries in the areas of malware analysis and DFIR. I am highly motivated to pursue a career in these fields and continuously work towards enhancing my knowledge and skills. Through my blog, I hope to share my enthusiasm with others and contribute to the community.","Core Member @TamilCTF Security Researcher & Member @InitCrew Security Researcher @SecureBinay","If you like my posts and have the means to support me, please consider supporting me here :-"]},{"l":"Contributions","p":["Added ProtonVPN artifacts plugin to ALEAPP Project","Proposed VLC Media Player adb backup artifacts for ALEAPP Project"]}],[{"l":"A Closer Look At Rust Based Malware"},{"l":"Introduction","p":["For Educational purpose only Spreading Malware is a violation of the law, so please don't create and send any malware using the tactics provided here to anyone I am not responsible for any damage All the malware samples are created using the codes taken from OffensiveRust GitHub repository.","In recent years, we have seen a significant increase in the popularity of the Rust programming language. Debates have arisen around Rust's speed, with some arguing that it is faster than C/C++. Notably, Rust has also been used to write kernel drivers for the Linux kernel, which previously only supported C and Assembly code. Furthermore, many popular command-line tools for Linux have been re-implemented in Rust. One such example is the well-known bat tool, a clone of cat with syntax highlighting and other features. These made me wonder why is Rust so popular? and how effective it would be for Offensive Purposes.","In this article, we will analyse some malicious Rust binaries and check their behavior against Windows Defender."]},{"i":"why-rust-so-special","l":"Why Rust So Special?","p":["Rust is a multi-paradigm, high-level, general-purpose programming language. Rust emphasizes performance, type safety, and concurrency. Rust enforces memory safety—that is, that all references point to valid memory—without requiring the use of a garbage collector or reference counting present in other memory-safe languages.","It is fast as C and C++ or sometimes even better.","It is LLVM based.","Easy to cross-compile.","The main reason for its offensive capabilities is the LLVM toolchain, which makes it easier to bypass static analyzers."]},{"l":"Overview Of Rust Binaries","p":["Before testing the Malware Samples, Let's look at a simple calculator program in Rust."]},{"l":"Creating a Rust Project","p":["cargo init rust_calc","Cargo.toml is the config file for cargo package manager. Dependencies and other project configurations can be defined in this file."]},{"l":"Building the Project","p":["~ 1 MB","4.8 MB","5 MB","As you can see, all the function symbols are stripped and its queit hard to understand the program flow.","Build Type","calculator output","cargo build --release to build the release version. The resulting executable will be found under the target\\release\\ directory. Here is the IDA disassembly of the both builds, they are almost same and both include function symbols.","cargo run to run the debug build.","Debug (unoptimized)","Debug Build","Function symbols expose so many informations in static analysis, so it should be stripped for better AV evasion. Fortunately, we just need to add a single line in Cargo.toml for stripping function symbols.","Here is the size of different build variants with default optimization.","IDA view of stripped Rust executable","Release (optimized + non-stripped)","Release (optimized + stripped)","Release Build","Size"]},{"l":"Testing Malware Samples","p":["In this section, we are going to test the classic Process Injection technique. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges - MITRE T1055","There are many samples with different types of techniques in OffensiveRust github repo, testing them all will make this blog super lengthy. For now, let's test the Local Process Injection and Remote Process Injection samples."]},{"l":"Local Process Injection","p":["Change the shellcode memory permission/protection to Read Execute using VirtualProtect","Copy the shellcode to allocated memory","Create a new Thread using CreateThread with the base address pointing to shellcode memory","Create Thread","Finally call WaitForSingleObject to keep the thread running infinitely","Finally the function casting exec_data eliminates the need for using Windows APIs calls like CreateThread etc.","Finding the correct function in IDA was a bit of annoying, but we can see the shellcode and all other function calls there.","IDA view of CreateThread","Let's do another test, this time using Windows APIs.","link_section specifies the section to use for a function or static, in our sample the shellcode is saved in the .text section and As a result, no need to create any RWX memory for our shellcode.","Local Process Injection - CreateThread Workflow :-","Local Process Injection - Shellcode Local Inject Workflow :-","Shellcode in .text section, starts at offset 0xcb6 and ends at offset 0xdc9","Shellcode Local Inject","Source : OffensiveRust - Process Injection Create Thread","Source : OffensiveRust - Shellcode_Local_Inject","That's all for Local Process Injection, to make things even harder we can use several types of obfuscations on strings and shellcodes, hide the Windows API function traces by manually implementing them and so on. litcrypt crate is an example for string obfuscation.","The no_mangle macro disables symbol name encoding, mangling is the encoding of function and variable names into unique names so that linkers can separate common names in the language. Disabling it is essential for unsafe C codes to access the shellcode.","This is the most basic process injection, saving shellcode in the .text section of the program and execute it without any API calls.","This sample really impressed me, same shellcode but this time shellcode is in stack memory. Literally no detection, the power of Rust obfuscation is really visible here. Windows Defender static analysis were easily defeated.","VirtualAlloc allocates memory for shellcode with Read Write Permission on the current process","Windows Defender easily caught our sample the moment it touched the disk, No wonder because we are putting plain metasploit shellcode in the .text section. Metasploit shellcodes are highly signatured, so its pretty hard to get them running most of the time."]},{"l":"Remote Process Injection","p":["Remote Process Injection is quiet different from the Local Process Injection. In this technique we are loading shellcode or DLL into the memory space of a running process and execute in its context. Imagine \uD83D\uDE01","Source : OffensiveRust - Process_Injection_CreateRemoteThread","Remote Process Injection - CreateRemoteThread Workflow :-","We input a process name in command-line arguement to our sample , eg:- rust_mal.exe notepad.exe","The pid of given process is looked up with the help of CreateToolhelp32Snapshot Windows API function","OpenProcess opens the given remote process with PROCESS_ALL_ACCESS(Gives all possible access rights)","VirtualAllocEx allocate memory in the remote process with RWX permission","Write shellcode to the allocated memory using WriteProcessMemory","Create a thread in the remote process with CreateRemoteThread function, just like in previous sample we point the base address to the shellcode memory","Finally close the process handle","In the latest Windows Defender update this sample was easily caught, but when I tested this sample before 14/02/2023 it was working rather well."]},{"l":"Final Thoughts","p":["When I tested each of these samples with Avast Free Antivirus, all of them were caught instantly. Its anti-exploit protection is impressive. Of course, highly sophisticated threat actors won't use these simple methods, but at least it can prevent skiddies.","To be honest, I was scared to see these samples in action. Rust's ability to bypass static analysis and even behavior analysis against Windows Defender is really impressive. I suggest you to install a better antivirus program such as Avast, Norton, etc. and also avoid running untrusted programs. On top of that, use a Firewall as well for better protection.","Simplewall Firewall","Thank you for taking the time to read my article. I hope it provided you with valuable insights and new knowledge. If you found it enjoyable and informative, I would greatly appreciate it if you could share it with your friends and connections. Your support means a lot to me."]},{"l":"References","p":["https://rayoflightz.github.io/re/rust/2020/05/19/Bite-Sized-Rust-RE-1-Deconstructing-Hello-World.html https://www.pwnthebox.net/rust/2020/11/01/deciphering-no-mangle.html https://cocomelonc.github.io/tutorial/2021/09/18/malware-injection-1.html https://cocomelonc.github.io/pentest/2021/09/29/findmyprocess.html"]}],[],[{"l":"Weaponizing Magisk Modules"},{"l":"Introduction","p":["For Educational purpose only. Spreading Malware is a violation of the law, so please don't create and send any malware using the tactics discussed here to anyone. I am not responsible for any damage.","Hello Friends, I am an android enthusiast who loves rooting and modifying android devices. Magisk is an unavoidable element of this task. At some point of time, I wondered what would happen if my device get infected by a Malicious magisk module. Yeah, I often install magisk modules for several mods and tweaks, so there is a chance for this imaginary scenario. And the Malware sources would be shady Telegram channels and websites serving magisk modules.","In this article, we will go through an attack scenario where the threat actor weaponize legitimate Magisk modules for Malicious purpose.","So, what is Magisk and why its an attack vector ?","Magisk is a free and open-source rooting software for Android devices that is widely used in Android modding communities. As a Magisk user myself, I can attest to the fun and excitement that comes with rooting Android devices. With rooting, users can modify CPU schedulers and frequencies to overclock/underclock their device performance, spin up Kali Nethunter to hack their neighbor's wifi (just kidding!, don't do that, its not good \uD83D\uDE42), or completely change system files such as fonts, boot animations, and so on. These are just a few of the possibilities that one can explore by rooting their Android device."]},{"l":"Magisk module","p":["One of the main features of Magisk is its module system, which allows users to automate most tasks by simply flashing a zip file. For example, the previously mentioned features, such as changing fonts, sounds, bootanimations requires typing many commands. But by creating a Magisk module, we can automate all this process with little to no user interaction."]},{"l":"Magisk module structure","p":["A Magisk module folder would look like this, I have only highlighted few files as I am only focusing on backdooring existing module than creating a completely new one.","post-fs-data.sh: Basically executes after installing the module. Handy for copying files around and like that.","service.sh: Think of like a systemd service, executes on every boot and restart of the module daemon.","sepolicy.rule: To set custom SELinux rules like enforcing.","You can refer the Magisk Developer Guides to learn more on Magisk modules."]},{"l":"The Attack Scenario","p":["Attack Chain :-","For our example scenario, I chose the ACC magisk module by VR-25. Then I will include a malicious script in it to obtain reverse shell from the target device.","Description of the module :-","ACC is an Android software mainly intended for extending battery service life. In a nutshell, this is achieved through limiting charging current, temperature, and voltage.","Most modern Android phones have built-in battery life-extending features, but many old phones doesn't support support this feature. ACC module helps in extending battery of old devices."]},{"l":"Backdooring The Magisk module","p":["First step is cloning the repo and collecting the original module files.","Unlike a Linux system, we can't use the normal /dev/tcp reverse shell in Android. Android networking is much more complex, so we need to rely on programs like Netcat or similar alternatives.","Unfortunately, Android doesn't come with Netcat preinstalled, but thankfully Magisk ships with a complete Busybox binary that contains nc and other useful tools.","This makes our task easier, the magisk busybox is located at : /data/adb/magisk/busybox","Backdoor script"]},{"l":"Building the module","p":["The repo had a build script named build.sh, this script automates the entire build process.","Module built successfuly","Luckily our backdoor had no errors."]},{"l":"Installing the module","p":["For convenience, I renamed the module zip to acc_backdoored.zip and pushed it to Downloads folder using adb.","Push the module to device","Module zip file","Pheww, No errors, installation successful.","Installation Success"]},{"l":"Gaining reverse shell","p":["Although we can easily get a reverse shell with nc, I wasn't quite satisfied with it. I wanted something more, which was both easy to use and provided more functionality.","The best and easiest option out there was, of course, our beloved Metasploit Android Meterpreter. And so I created a meterpreter payload and served it on port 8080 using a Python HTTP server.","I am doing this locally, thats why my IP is in 192.168.X.X range.","Reverse shell connected"]},{"l":"Privilege Escalation","p":["We need to download the payload in the target device, again android doesn't come with curl, wget or similar tools. But since we are in the magisk busybox environment, we can use wget to download the payload apk. We can then install the evil.apk using the pm command, which is the core of the conventional Apk Installer system.","Downloading meterpreter","APKs installed through ADB and package manager (PM) are all monitored by Google Play Protect. However, the Metasploit payload is heavily signed by AV providers, hence it is blocked by default. To get things working, I had to disable the App Signature Verification for ADB/ADT in the Developer Options. So on a normal user's device, unless they disabled the verification, meterpreter can't be installed. But this could be bypassed with obfuscation and other AV bypass techniques.","Unfortunately, at first, it didn't work and gave the \"Failed transaction error.\" This is because of SELinux enforcing, which prevents privilege escalation by preventing system service calls and other actions. In order to bypass this, we need to set SELinux enforcing to permissive mode. The setenforce command can be used to temporarily change SELinux to permissive mode.","After changing SELinux to permissive with the setenforce 0 command, we can then install the apk and execute it without encountering any issues.","The am(Activity manager) is used to start the MainActivity of our meterpreter payload.","Finally we got the meterpreter shell. This shell is persistent, whenever the user reboot their device both the nc reverse shell and meterpreter is loaded. All we need to do is keep the listener open.","Meterpreter Success"]},{"l":"Assessing the Malicious module","p":["Assessing module is pretty easy, we just need to extract the module zip file. Since our example module only have shell scripts, it won't be hard to detect. But like I said before, with magisk modules we can change system files, which includes libraries, binaries etc. So finding malicious binaries and libraries would be quite hard and would require great reversing skills."]},{"l":"Reliable sources for downloading Magisk modules","p":["This attack scenario could be real, As you can see there were literally no IOC a normal user can detect. Only chances would be, if the threat actor download all data, then the user can notice increased data usage and act accordingly. But if the attacker is patient enough, then everything will be compromised.","So here are some reliable and safe places where you can download Magisk modules :-","Github","Fox's Magisk Module Manager","XDA Forums","Official Device community and development groups in Telegram"]},{"l":"Conclusion","p":["In conclusion, installing Magisk modules from unknown sources comes with a significant risk that cannot be ignored. Its better to install only essential modules than installing every module you see online. Also checking whats inside the module would be definitely a good practice, when its not from official module github repo and likewise."]}]]