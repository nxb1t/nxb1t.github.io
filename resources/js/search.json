[[{"i":"who-am-i-","l":"Who Am I ?","p":["Hello everyone, I am Nashid P (nxb1t), a Computer Science student from Kerala, India. I am a passionate blogger who enjoys writing about my experiences in CTF competitions, as well as my insights and discoveries in the areas of malware analysis and DFIR. I am highly motivated to pursue a career in these fields and continuously work towards enhancing my knowledge and skills. Through my blog, I hope to share my enthusiasm with others and contribute to the community.","Core Member @TamilCTF Security Researcher & Member @InitCrew","If you like my posts and have the means to support me, please consider supporting me here :-"]},{"l":"Contributions","p":["Added ProtonVPN artifacts plugin to ALEAPP Project","Proposed VLC Media Player adb backup artifacts for ALEAPP Project"]}],[{"i":"android-forensics---an-introduction","l":"Android Forensics - An Introduction","p":["Hello Friends, In this blog, we will explore Android Forensics, the process of acquiring Android device, anti-forensics techniques, and a practical example on analysis and recovery of deleted files from an Android device image."]},{"l":"Key Terminologies used in this blog","p":["Acquisition : The gathering of sensitive data during a digital forensic investigation","Forensically Soundness : The application of a transparent digital forensics process that preserves the original meaning of data for production in a court of law","Disk Image/Dump : A disk image/dump is a file containing the contents and structure of a disk volume or of an entire data storage device.","ROM : Android Operating System, Stock ROMs are the Android OS which comes preinstalled with the phone. Custom ROMs are the modified Android OS maintained by open source communities.","Block Device : Block Devices tend to be storage devices, capable of buffering output and storing data for later retreival. HDD, SSD etc are example for block device."]},{"l":"Why Android Forensics"},{"l":"To Support An On Going Crime Investigation","p":["Android Forensics helps in finding Digital evidence from Android Phones related to an ongoing criminal investigation. If the accused is using Apple iPhone, iPhone forensics is applied. People use Smartphones for both digital crimes and non-digital crimes. So Analysing these devices are crucial to solve the investigations."]},{"l":"To Identify Malware","p":["Malware attacks on smartphones have grown big recently. At least a single person in a household now owns a smartphone. Most people do banking and purchasing through their smartphones. This has attracted many threat actors. Varying from simple key loggers to ultimate Spywares ( like Pegasus) that keep spying on victims 24x7, the smartphone threats have become scary. Android Forensics and Mobile Forensics in general help in identifying these threats on the incident."]},{"l":"The Android Forensics Procedure","p":["Sieze and Isolate: Seize the device (Mostly done on criminal investigations) and Isolate it to avoid Tampering data.","Acquisition: Create a copy of the device storage or files.","Decryption: Decrypt the storage if its encrypted.","Analysis: Analyse the collected evidence."]},{"l":"Types Of Android Device Acquisitions","p":["Physical Acquisition The process of creating a bit-by-bit copy of the storage device is known as Physical acquisition. With this method, we can analyse deleted files and system files. This type of acquisition can be done using software with elevated privilege (root access) or directly imaging the storage device using JTAG Interface, EDL Mode (bootloader implemented by SOC devs).","Logical Acquisition In this process, we are copying existing files from the device storage. Which means we can't analyse the deleted files and also key system files of the Android OS. This type of acquisition doesn't require root access.","Cloud Acquisition This method relies on cloud backup and other cloud data source. For example, WhatsApp chats can be analysed using WhatsApp cloud backups.","UFS (Universal Filesystem Storage) 3.0 - Read/Write Speed ~ 2900 MB/s","eMMC (Embedded Multi-Media Card) 5.1 - Read/Write Speed ~ 256 MB/s","Easy JTAG Box with eMMC and UFS Interface"]},{"l":"Android Forensics Tools","p":["Autopsy is a GUI front-end of TSK with many custom modules and add-ons.","Autopsy Sleuthkit","Belkasoft Evidence Center X","Cellebrite UFED","Cellebrite UFED is a powerful platform to dump and analyse different portable devices like Mobile Phones, Drones , SIM card etc.","Description","Easily acquire forensic images of any iOS or Android device, hard drive, and removable media","Evidence Center X is a flagship tool by Belkasoft for computer, mobile and cloud forensics. It can acquire and analyze a wide range of mobile devices and computers.","License Type","List of different tools used in the Android Forensics realm.","Magnet Acquire","Magnet AXIOM","Magnet AXIOM is another platform capable of analyzing wide range of mobile devices.","Oxygen Forensics Detective","Oxygen Forensics Detective is an all-in-one forensic software platform built to extract, decode, and analyze data from multiple digital sources.","Sleuthkit (TSK)","Tool Name","TSK is a collection of command line tools and a C library that allows you to analyze disk images and recover files from them."]},{"l":"Android OS","p":["Android is a mobile operating system based on modified version of the Linux kernel. Android's kernel is based on the Linux kernel's long-term support(LTS) branches.","Android has another operating system, Trusty OS, which is Google's implementation of a Trusted Execution Environment (TEE) OS that runs alongside Android. TEE is a secure area of the SOC chip. This enables Hardware-backed keystorage to ensure encryption and decryption keys are securely handled. As a result the keys are never loaded in the RAM and is protected from many ram based attacks."]},{"l":"Android Partitions","p":["Android Framwork","boot","cache","Contains a kernel image and a generic ramdisk","Contains proprietary files which are not distributed with AOSP, ie system applications and libraries added by OEMS","Contains some preloaded system apss and regional settings which are installed on first use","Contains the recovery image. The recovery image holds a recovery program that lets the device boot into a recovery console for performing advanced recovery and maintenance operations. It contains a second complete Linux system i.e. independent OS, including a user-interface application, kernel and the special recovery binary that reads a package and uses its contents to update i.e, flash or wipe itself or any other partition particularly during OTA updates","Contains user-installed apps, media files and other user data","cust","Description","In this section, we will cover the important partitions which are same across Android versions.","misc","Partition Name","recovery","system","Temporary data storage","There are several partitions in Android devices that serve different functions of boot process. Google introduced new changes to partition layout since Android 11 and it is even more tweaked in the recent Android 13 update (as of writing this blog).","Used by recovery partition","userdata / data","vendor"]},{"l":"Android Disk Encryption","p":["Android uses FDE (Full-Disk Encryption) and FBE (File-Based Encryption) schemes to encrypt the internal storage. FDE was used as default from Android 5 till Android 9, since Android 10 FBE is used the default encryption scheme."]},{"i":"full-disk-encryption-fde","l":"Full-Disk Encryption (FDE)","p":["Android full-disk encryption is based on dm-crypt, which is a kernel feature that works at the block device layer. The encryption algorithm is 128 Advanced Encryption Standard (AES) with cipher-block chaining (CBC) and ESSIV:SHA256. The master key is encrypted with 128-bit AES via calls to the OpenSSL library. Upon first boot, the device creates a randomly generated 128-bit master key and then hashes it with a default password and stored salt. The default password is: default_password However, the resultant hash is also signed through a TEE (such as TrustZone), which uses a hash of the signature to encrypt the master key. The device can be encrypted using PIN, Password, Pattern or with the default password. One of the limitation of FDE is that the phone will be usable only after entering the credentials on boot, this is also known as Secure Startup. Which means, SMS, Receiving Calls , alarms and other services are not available if credentials are not provided. Most OEMs use default password for encryption.","FDE is suspect to these types of attacks:-","Bruteforce Attack: Bruteforcing the lockscreen using adb or an HID interface. Bruteforcing takes lots of times because OEMs use different schemes in their lockscreen timeout and also if the PIN/Password is long it will be relatively impossible to crack.","Cold Boot Attack: FDE decryption keys were loaded in RAM for decryption process. The keys can be extracted by creating a memory dump after cooling the RAM module. This attack is obsolete these days."]},{"i":"file-based-encryption-fbe","l":"File-Based Encryption (FBE)","p":["FBE allows different files to be encrypted with different keys that can be unlocked independently. FBE introduced a new boot method called Direct Boot. With Direct Boot, encrypted devices can boot straight into lock screen. On an FBE-enabled device, each user of the device has two storage locations available to applications: Credential Encrypted (CE) storage, which is the default storage location and only available after the user has unlocked the device and Device Encrypted (DE) storage, which is a storage location available both during Direct Boot mode and after the user has unlocked the device. Phone Dialer, Alarm and other important applications run on the DE storage after boot.","Secure Startup Option in MIUI 11","Secure Startup Lock Screen"]},{"l":"Physical Acquisition of an Android Device","p":["Please note that the procedures mentioned in this blog are intended for an overview of acquiring Android devices. In real-world scenarios, such as in forensics labs, devices are isolated and protected from any form of data tampering, they also use professional tools for acquisition and analysis. Simulating those methods in a home lab is not feasible.","Let's do Physical Acquisition method on a FDE encrypted Android device.","Device Specifications :- Model : Xiaomi Redmi Note 6 Pro (Tulip) ROM/OS : MIUI 11 (Android 9) Recovery : TWRP Custom Recovery Encryption : FDE ( with default password )","Required Tools:","Android SDK Platform Tools"]},{"l":"Preparing The Device","p":["Unlock Bootloader : Each Manufacturer has different methods to unlock bootloader. Refer to device forums to find the correct procedure, also please note that some manufacturers don't allow unlocking the bootloader.","Install Custom Recovery : There are many custom recovery projects for Android. TWRP Custom Recovery is the most popular one among them. We can start a temporary recovery session with the commands given below. To Permanently install TWRP in the device, refer to this XDA Forums Post","TWRP supports decryption of both FDE and FBE, If the device is encrypted with the default password, TWRP will automatically decrypt the storage. Otherwise, the user will be asked to enter the password/pin code.","Data(userdata) partition and Cache partition are mounted by default in recovery. Only the mounted partitions are decrypted, so if we have to dump the System partition or any other partitions, we will have to mount them. Partitions can be mounted through the Mount option.","TWRP Menu --> Mount","TWRP Recovery Menu","TWRP Mount Section","We can determine the type of encryption by running the following command through adb. If the result is block, then it is FDE or if the result is file, it is FBE encryption.","Check device encryption","FDE encrypted storage","FBE encrypted storage"]},{"l":"Dumping Data Partition","p":["Firs of all we have to determine the name of data partition. As we know, FDE encryption is based on dm-crypt, so the decrypted partition will be mounted on separate block device. We can list the mounted partitions through adb with the following commands :-","But before that, I will boot my device into Recovery Mode ( either with adb or by pressing the volume up button and power button, it will vary from device to device). Because Android doesn't allow root permissions via adb while its running in standard mode.","adb can't run with root permissions","After booting into recovery mode","Here we can see /dev/block/dm-0 which is mounted on /data mountpoint. That's the decrypted data partition we need to dump, because the custom recovery automatically decrypts it using the default password.","In the below image, we can see a block device named mmcblk0, which is equivalent to the /dev/sda device file we see in linux distros.","Block Devices List","Dumping partitions are really easy, and the time consumption may vary depending on the partition size and speed of the devices. In our case, the internal storage size is 64 GB and the data partition around 50 GB. So, I dumped both mmcblk0 block device and the dm-0 block device, which totals to over 100 GB. mmcblk0 is the encrypted internal storage, so I named its dump encdisk.img and for dm-0 I named it decdata.img.","Block device names might vary depending on the devices, so make sure to enter the correct name while dumping the partition.","We will use the adb pull command to dump the block devices/partitions.","Dumping data partition and entire storage"]},{"l":"Analysing The Forensic Image","p":["Ok, Now we can analyse our dumped data partition image using Autopsy Software.","Open Autopsy and Select New Case , Enter required info.","Autopsy New Case","Select Disk Image as source type.","Select Data Source","Select the required Modules, In our case I have only selected Picture Analyzer, Photorec, Central Repo and Android.","Autopsy Modules","Once it starts processing the image, we can see many data artifacts such as call logs, contacts, messages etc in real-time.","Artifacts List","We can also use TSK command-line utilities to access forensic image contents, its really liteweight on the system but involves lots of manual work."]},{"i":"tsk-command-line-reference-","l":"TSK command-line reference:-","p":["fls : fls lists the files and directory names in a file system.","mmls : mmls displays the contents of a volume system (media management).","icat : icat outputs the contents of a file in a disk image to STDOUT.","TSK usage example","In the below screenshots, we have used mmls on the encdisk.img. Only a few partitions like the cache are unencrypted. Userdata and other important partitions are encrypted. More TSK commands and their usage can be found in Sleuthkit wiki","mmls","Listing files of different partitions"]},{"l":"Recovering Deleted Files","p":["Before recovering the deleted files, let's see what's happening under the hood."]},{"i":"how-data-recovery-works-","l":"How Data Recovery Works:-","p":["When we store files in hdd/ssd, the files are stored in blocks. Each block contains a piece of the file. The first block usually contains the metadata for the file. When we delete a file, only the first block which contains metadata is deleted. The operating system can no longer detect the file because it's metadata is lost hence considers the blocks free for writing new file. Recovery tools read the storage sectors one by one, block by block, and find correlated blocks. Once all the correlated blocks are found, the recovery utilities remake the metadata. Since the blocks are marked free, there is a high chance of blocks getting overwritten by new files, hence the recovered files might have the contents of an already existing file. So, It is highly recommended to recover file as quickly as possible to prevent overwriting.","For most of the users, Autopsy would be enough to recover the deleted files as it includes the tools listed below, selecting all the files in Deleted Files category and exporting it to the desired folder will do the job. But if you are using a low spec system and a data source with many files, then Autopsy won't be a good option. Let's check at some command-line tools for data recovery.","tsk_recover: tsk_recover recovers files to the output_dir from the image. By default recovers only unallocated files. With flags, it will export all files.","tsk_recover","PhotoRec: PhotoRec is file data recovery software designed to recover lost files including video, documents and archives.","PhotoRec","Here are a couple of recovered files from the WhatsApp Images folder. As I mentioned before, some deleted files are overwritten with existing files. So the data recovery success rate were around 60%."]},{"l":"Anti-Forensic Techniques","p":["Anti-forensic techniques are designed to completely hide data/traces related to a user from the system, making investigation harder for Digital Forensic Investigators. There is both good and bad use cases for Anti- Forensic Techniques. The good situation is when we sell our phone to a stranger or giving away to someone else, It would be better to wipe our phone thoroughly. Because we don't know if they are notorious and have skills in digital forensics. The bad use case would be criminals hiding and destroying evidences."]},{"l":"Disk Wipe","p":["It is the first and foremost Anti-Forensic Technique. Deleting all of the data on a storage device. While simple deletion doesn't prevent recovery, disk wipe make use of secure delete to surpass it. Each sectors from beginning to end of the storage is overwritten using zeros. Individual files can be also securely deleted using file shredders. Android doesn't have much reliable tools for file shredding and disk wiping. The only option is to set the secure startup in FDE devices and set a long password and then format the device couple of times. Same for the FBE devices, format it couple of times to make it impossible to get decryption keys."]},{"l":"File Encryption","p":["As the name suggests, the file encryption technique encrypts files using passwords. In Android, there are many apps for file encryption that makes use of TEE feature. Getting the correct password will be a pain in this context."]},{"l":"Steganography","p":["Steganography is the method of hiding file inside another file. This technique is pretty rare but shouldn't be neglected. For example hiding text inside Audio, Image files etc."]},{"l":"References","p":["Android Partitions","Trusty TEE","Android rooting Guide"]},{"l":"Further Learning","p":["DFIRScience","Awesome Forensics","DFIR Resources","Stark4n6","Alexis Brignoni Blog"]}],[{"l":"A Closer Look At Rust Based Malware"},{"l":"Introduction","p":["For Educational purpose only Spreading Malware is a violation of the law, so please don't create and send any malware using the tactics provided here to anyone I am not responsible for any damage All the malware samples are created using the codes taken from OffensiveRust GitHub repository.","In recent years, we have seen a significant increase in the popularity of the Rust programming language. Debates have arisen around Rust's speed, with some arguing that it is faster than C/C++. Notably, Rust has also been used to write kernel drivers for the Linux kernel, which previously only supported C and Assembly code. Furthermore, many popular command-line tools for Linux have been re-implemented in Rust. One such example is the well-known bat tool, a clone of cat with syntax highlighting and other features. These made me wonder why is Rust so popular? and how effective it would be for Offensive Purposes.","In this article, we will analyse some malicious Rust binaries and check their behavior against Windows Defender."]},{"i":"why-rust-so-special","l":"Why Rust So Special?","p":["Rust is a multi-paradigm, high-level, general-purpose programming language. Rust emphasizes performance, type safety, and concurrency. Rust enforces memory safety—that is, that all references point to valid memory—without requiring the use of a garbage collector or reference counting present in other memory-safe languages.","It is fast as C and C++ or sometimes even better.","It is LLVM based.","Easy to cross-compile.","The main reason for its offensive capabilities is the LLVM toolchain, which makes it easier to bypass static analyzers."]},{"l":"Overview Of Rust Binaries","p":["Before testing the Malware Samples, Let's look at a simple calculator program in Rust."]},{"l":"Creating a Rust Project","p":["cargo init rust_calc","Cargo.toml is the config file for cargo package manager. Dependencies and other project configurations can be defined in this file."]},{"l":"Building the Project","p":["~ 1 MB","4.8 MB","5 MB","As you can see, all the function symbols are stripped and its queit hard to understand the program flow.","Build Type","calculator output","cargo build --release to build the release version. The resulting executable will be found under the target\\release\\ directory. Here is the IDA disassembly of the both builds, they are almost same and both include function symbols.","cargo run to run the debug build.","Debug (unoptimized)","Debug Build","Function symbols expose so many informations in static analysis, so it should be stripped for better AV evasion. Fortunately, we just need to add a single line in Cargo.toml for stripping function symbols.","Here is the size of different build variants with default optimization.","IDA view of stripped Rust executable","Release (optimized + non-stripped)","Release (optimized + stripped)","Release Build","Size"]},{"l":"Testing Malware Samples","p":["In this section, we are going to test the classic Process Injection technique. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges - MITRE T1055","There are many samples with different types of techniques in OffensiveRust github repo, testing them all will make this blog super lengthy. For now, let's test the Local Process Injection and Remote Process Injection samples."]},{"l":"Local Process Injection","p":["Change the shellcode memory permission/protection to Read Execute using VirtualProtect","Copy the shellcode to allocated memory","Create a new Thread using CreateThread with the base address pointing to shellcode memory","Create Thread","Finally call WaitForSingleObject to keep the thread running infinitely","Finally the function casting exec_data eliminates the need for using Windows APIs calls like CreateThread etc.","Finding the correct function in IDA was a bit of annoying, but we can see the shellcode and all other function calls there.","IDA view of CreateThread","Let's do another test, this time using Windows APIs.","link_section specifies the section to use for a function or static, in our sample the shellcode is saved in the .text section and As a result, no need to create any RWX memory for our shellcode.","Local Process Injection - CreateThread Workflow :-","Local Process Injection - Shellcode Local Inject Workflow :-","Shellcode in .text section, starts at offset 0xcb6 and ends at offset 0xdc9","Shellcode Local Inject","Source : OffensiveRust - Process Injection Create Thread","Source : OffensiveRust - Shellcode_Local_Inject","That's all for Local Process Injection, to make things even harder we can use several types of obfuscations on strings and shellcodes, hide the Windows API function traces by manually implementing them and so on. litcrypt crate is an example for string obfuscation.","The no_mangle macro disables symbol name encoding, mangling is the encoding of function and variable names into unique names so that linkers can separate common names in the language. Disabling it is essential for unsafe C codes to access the shellcode.","This is the most basic process injection, saving shellcode in the .text section of the program and execute it without any API calls.","This sample really impressed me, same shellcode but this time shellcode is in stack memory. Literally no detection, the power of Rust obfuscation is really visible here. Windows Defender static analysis were easily defeated.","VirtualAlloc allocates memory for shellcode with Read Write Permission on the current process","Windows Defender easily caught our sample the moment it touched the disk, No wonder because we are putting plain metasploit shellcode in the .text section. Metasploit shellcodes are highly signatured, so its pretty hard to get them running most of the time."]},{"l":"Remote Process Injection","p":["Remote Process Injection is quiet different from the Local Process Injection. In this technique we are loading shellcode or DLL into the memory space of a running process and execute in its context. Imagine \uD83D\uDE01","Source : OffensiveRust - Process_Injection_CreateRemoteThread","Remote Process Injection - CreateRemoteThread Workflow :-","We input a process name in command-line arguement to our sample , eg:- rust_mal.exe notepad.exe","The pid of given process is looked up with the help of CreateToolhelp32Snapshot Windows API function","OpenProcess opens the given remote process with PROCESS_ALL_ACCESS(Gives all possible access rights)","VirtualAllocEx allocate memory in the remote process with RWX permission","Write shellcode to the allocated memory using WriteProcessMemory","Create a thread in the remote process with CreateRemoteThread function, just like in previous sample we point the base address to the shellcode memory","Finally close the process handle","In the latest Windows Defender update this sample was easily caught, but when I tested this sample before 14/02/2023 it was working rather well."]},{"l":"Final Thoughts","p":["When I tested each of these samples with Avast Free Antivirus, all of them were caught instantly. Its anti-exploit protection is impressive. Of course, highly sophisticated threat actors won't use these simple methods, but at least it can prevent skiddies.","To be honest, I was scared to see these samples in action. Rust's ability to bypass static analysis and even behavior analysis against Windows Defender is really impressive. I suggest you to install a better antivirus program such as Avast, Norton, etc. and also avoid running untrusted programs. On top of that, use a Firewall as well for better protection.","Simplewall Firewall","Thank you for taking the time to read my article. I hope it provided you with valuable insights and new knowledge. If you found it enjoyable and informative, I would greatly appreciate it if you could share it with your friends and connections. Your support means a lot to me."]},{"l":"References","p":["https://rayoflightz.github.io/re/rust/2020/05/19/Bite-Sized-Rust-RE-1-Deconstructing-Hello-World.html https://www.pwnthebox.net/rust/2020/11/01/deciphering-no-mangle.html https://cocomelonc.github.io/tutorial/2021/09/18/malware-injection-1.html https://cocomelonc.github.io/pentest/2021/09/29/findmyprocess.html"]}],[{"l":"Reversing Android Malware"},{"l":"Introduction","p":["Malware (Malicious Software) is a type of software that causes harm to your digital devices. These digital viruses can spy on your daily lives, steal money, encrypt files or make your system completely inoperable. Back in the day, computers were the main vector of Malware attacks, but that is now changed. A great number of people own a smartphone, but most aren't practicing good security methods. As a result, attackers are targeting smartphones more in today's digital era.","Today we will reverse engineer and uncover secrets of two different malware."]},{"l":"Prerequisites","p":["The tools we will be using to analyse the characteristics of malware are ,","JADX-GUI- Dex to Java decompiler","MobSF- MobSF is an automated, all-in-one mobile application (Android/iOS/Windows) for pen-testing, malware analysis, and security assessment framework capable of performing static and dynamic analysis.","Ghidra- Ghidra is a software reverse engineering (SRE) framework","JADX and MobSF require JRE 8 or above.","Installation methods for JADX,","Linux [JADX]","Windows [JADX]","Installation methods for MobSF,","Linux [MobSF]","Windows [MobSF]"]},{"l":"Analysis"},{"l":"Meterpreter Malware","p":["An intent is an abstract description of an operation to be performed. It can be used to start an activity, send intents to BroadcastRecievers, etc. In our case, the BOOT_COMPLETED intent is received by MainBroadcastReceiver.","ApkBleach is a python script to pack/obfuscate meterpreter malware which has many features.","Awesome, we got the C2 IP from a unpacked/non-obfuscated malware.","BOOT_COMPLETED intent is sent when the device boot after proper shutdown, and restart isn't affected.","Decoding few bytes from the array using python to print ASCII characters.","Decompiling the MainBroadcastReceiver class gives us a better understanding of the persistence mechanism.","Eventhough we apply some simple obfuscation techniques Defenders and Reverse Engineering techniques are smart enough today to analyse and categorize this malware.","First of all, lets understand the structure of an apk file.","From the MainBroadcastReceiver it can be observed that the persistence mechanism is dependent on,","From the reversed output of the source code from the APK, it can be observed that the APK uses some notable classes:","If the received intent is android.intent.action.BOOT_COMPLETED, receiver starts the MainService which is a staged payload","img","In the permissions tab, we can see the permissions requested by the app. This data is fetched from AndroidManifest.xml file.","It can be observed that the ApkBleach obfuscates keywords to bypass detection. But this is not enough to overcome smart defenders which are being used in the wild today.","MainActivity","MainBroadcastReciever","MainService","Meterpreter asks for many dangerous permissions such as READ_CALL_LOG, READ_SMS, READ_CONTACTS etc. This clearly indicates its a bad application requesting for unauthorized access. MobSF also extracts cleartext IPs and URLs from app source codes and checks them on VirusTotal, with this feature we can see if there exist any Malicious servers. But in our Meterpreter case, the C2 Server IP address is not in plaintext format. As a result, it isn't detected by MobSF.","Meterpreter can talk to Command & Control (C2) Server using TCP, HTTP, and HTTPS protocols. For more info on Metasploit Android Modules, refer here.","Now its time to use Jadx-GUI. On the left-pane, we can see source code and resources. Currently, I have opened the AndroidManifest.xml of the app. We can see the permissions and other pieces of information.","Now reversing the Payload class which is pretty big containing shellcodes for our RAT. We will be decoding our LHOST value from this class which is converted into other data type.","Payload","Reference : https://en.wikipedia.org/wiki/Apk_(file_format)","Since it is converted into other type we could not find our C2 IP address using search feature. Looking through the code and the first-byte array a seems like a converted data type object. The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive). The printable characters in ASCII are from 33 to 126. So the byte array may have printable characters.","The above image refers the typical structure of a APK file","The arguments required for successful tunnel creation for the RAT and C2 server are LHOST : Attacker IP Address (CONTROL SERVER) and LPORT : Attacker Port","The below onliner command is used to craft a meterpreter RAT using Metasploit Framework,","The highlighted line in the above screenshot plays a vital role in functioning as RAT. Let's break down that method because it's a persistence mechanism.","The MainBroadcastReciever listen for Broadcast Intents","The Meterpreter is a RAT (Remote Access Trojan) type Malware. Once executed on the victim's device, it will grant an attacker complete access to the device.","This sums up the static analysis of Meterpreter Malware.","We will use MobSF to get an overview of the App. This tool saves lots of time when compared to manually analyzing each component of the app, also every piece of information is well documented by the MobSF framework."]},{"i":"xloadermoqhao-malware","l":"XLoader/MoqHao Malware","p":["( arg-types ) ret-type: method type","[type: type[]","Always keep your device up to date and never install apps from third-party sites, this will reduce the chance of installing malware. Nowadays, Google Playstore has become an attack vector to spread malware, so cautiously install apps from Playstore either.","Analysing the malware in VirusTotal flags it as suspicious","As you can see, there aren't many methods in this Malware, and it's packed (obfuscated). Even some permissions are obfuscated. Additionally, this Malware comes with a native library libvga.so which is under lib/armeabi-v7a and a file named 1bmurb1 under assets/mvmc, which is the encrypted payload of this Malware. The payload is decrypted on the runtime to evade detection.","B: byte","Breakdown of the above shown code in short context:","By checking the native library functions in ghidra, we can see that native methods are defined in the format of Java_mangled_class_name_mangled_method_name.","C: char","D: double","Decompiling the Java_s_ni_pi function using Ghidra,","Decompiling using HexRays IDA Decompiler the decompilation is much clear now. In this output, v23 is the XOR key where it is retrieved from v23 = v61[11]. v61 is passed to the read method and it holds the encrypted data of the payload file. That means the XOR key is the 12th byte of the encrypted payload file 1bmurb1.","Decompress the XORed payload with Inflate Algorithm","F: float","For the second Analysis, I chose XLoader Malware Sample from MalwareBazaar. This one is entirely different from Meterpreter Malware and tricky to reverse.","Here is the summary of the XLoader Malware:","I: int","img","JNI Type Signatures :","L: fully-qualified-class","Load the payload to InputStream","Loading our malware into MobSF Framework to perform static analysis","Loading the decrypted DEX file in jadx-GUI to view the payload","mvmc object, which is the name of the asset folder is passed to method c","Native libraries are libraries written in C/C++ or other languages. Apps can access native libraries through JNI ( Java Native Interface ) programming Interface. The native keyword is used to implement JNI methods. In our sample, The package s has the implementation of the native methods.","ni.iz executes the payload object","ni.oa returns Class object after loading the result of ni.ls","S: short","The GNuApplication is the main class that interacts with the native library.","The JNINativeMethod requires method signatures to handle arguments and return types. It is listed in Type Signatures section on JNI docs.","The ni.pi method decrypts the payload file , ni.ls load the decrypted payload with com.Loader","The obfuscated permissions from GNuApplication are,","The System.loadLibrary(vg) method loads the libvg.so native library","The XLoader/MoqHao Malware is a banking Trojan which mainly targets Japanese and South Korean Android Users. It has many features like sending and receiving SMS, changing audio ringer settings, installing malicious apps, spying on user activities and device status, etc. Our sample was targeting users of japaneses banks like Sumitomo Mitsui Banking Corporation.","V: void","We can see the AssetManager being called in the decompiled code of Java_s_ni_pi method shown below. The payload is processed with the following steps.","We have successfully decrypted the payload file and we can see the decompilation of payload file is pretty tricky.","We will use ghidra to decompile the native library. This library is flagged as a Trojan dropper and considered as malicious.","With the help of Cryptax's MoqHaoUnpacker, I was able to decrypt the payload. The decrypted payload is a dex file.","XOR the payload with a key","Z: boolean"]},{"l":"References","p":["Unpacking the Packed Unpacker: Reverse Engineering an Android Anti-Analysis Native Library - by Maddie Stone","Azeria Labs - ARM Assembly Basics"]}],[{"l":"Weaponizing Magisk Modules"},{"l":"Introduction","p":["For Educational purpose only. Spreading Malware is a violation of the law, so please don't create and send any malware using the tactics discussed here to anyone. I am not responsible for any damage.","Hello Friends, I am an android enthusiast who loves rooting and modifying android devices. Magisk is an unavoidable element of this task. At some point of time, I wondered what would happen if my device get infected by a Malicious magisk module. Yeah, I often install magisk modules for several mods and tweaks, so there is a chance for this imaginary scenario. And the Malware sources would be shady Telegram channels and websites serving magisk modules.","In this article, we will go through an attack scenario where the threat actor weaponize legitimate Magisk modules for Malicious purpose.","So, what is Magisk and why its an attack vector ?","Magisk is a free and open-source rooting software for Android devices that is widely used in Android modding communities. As a Magisk user myself, I can attest to the fun and excitement that comes with rooting Android devices. With rooting, users can modify CPU schedulers and frequencies to overclock/underclock their device performance, spin up Kali Nethunter to hack their neighbor's wifi (just kidding!, don't do that, its not good \uD83D\uDE42), or completely change system files such as fonts, boot animations, and so on. These are just a few of the possibilities that one can explore by rooting their Android device."]},{"l":"Magisk module","p":["One of the main features of Magisk is its module system, which allows users to automate most tasks by simply flashing a zip file. For example, the previously mentioned features, such as changing fonts, sounds, bootanimations requires typing many commands. But by creating a Magisk module, we can automate all this process with little to no user interaction."]},{"l":"Magisk module structure","p":["A Magisk module folder would look like this, I have only highlighted few files as I am only focusing on backdooring existing module than creating a completely new one.","post-fs-data.sh: Basically executes after installing the module. Handy for copying files around and like that.","service.sh: Think of like a systemd service, executes on every boot and restart of the module daemon.","sepolicy.rule: To set custom SELinux rules like enforcing.","You can refer the Magisk Developer Guides to learn more on Magisk modules."]},{"l":"The Attack Scenario","p":["Attack Chain :-","For our example scenario, I chose the ACC magisk module by VR-25. Then I will include a malicious script in it to obtain reverse shell from the target device.","Description of the module :-","ACC is an Android software mainly intended for extending battery service life. In a nutshell, this is achieved through limiting charging current, temperature, and voltage.","Most modern Android phones have built-in battery life-extending features, but many old phones doesn't support support this feature. ACC module helps in extending battery of old devices."]},{"l":"Backdooring The Magisk module","p":["First step is cloning the repo and collecting the original module files.","Unlike a Linux system, we can't use the normal /dev/tcp reverse shell in Android. Android networking is much more complex, so we need to rely on programs like Netcat or similar alternatives.","Unfortunately, Android doesn't come with Netcat preinstalled, but thankfully Magisk ships with a complete Busybox binary that contains nc and other useful tools.","This makes our task easier, the magisk busybox is located at : /data/adb/magisk/busybox","Backdoor script"]},{"l":"Building the module","p":["The repo had a build script named build.sh, this script automates the entire build process.","Module built successfuly","Luckily our backdoor had no errors."]},{"l":"Installing the module","p":["For convenience, I renamed the module zip to acc_backdoored.zip and pushed it to Downloads folder using adb.","Push the module to device","Module zip file","Pheww, No errors, installation successful.","Installation Success"]},{"l":"Gaining reverse shell","p":["Although we can easily get a reverse shell with nc, I wasn't quite satisfied with it. I wanted something more, which was both easy to use and provided more functionality.","The best and easiest option out there was, of course, our beloved Metasploit Android Meterpreter. And so I created a meterpreter payload and served it on port 8080 using a Python HTTP server.","I am doing this locally, thats why my IP is in 192.168.X.X range.","Reverse shell connected"]},{"l":"Privilege Escalation","p":["We need to download the payload in the target device, again android doesn't come with curl, wget or similar tools. But since we are in the magisk busybox environment, we can use wget to download the payload apk. We can then install the evil.apk using the pm command, which is the core of the conventional Apk Installer system.","Downloading meterpreter","APKs installed through ADB and package manager (PM) are all monitored by Google Play Protect. However, the Metasploit payload is heavily signed by AV providers, hence it is blocked by default. To get things working, I had to disable the App Signature Verification for ADB/ADT in the Developer Options. So on a normal user's device, unless they disabled the verification, meterpreter can't be installed. But this could be bypassed with obfuscation and other AV bypass techniques.","Unfortunately, at first, it didn't work and gave the \"Failed transaction error.\" This is because of SELinux enforcing, which prevents privilege escalation by preventing system service calls and other actions. In order to bypass this, we need to set SELinux enforcing to permissive mode. The setenforce command can be used to temporarily change SELinux to permissive mode.","After changing SELinux to permissive with the setenforce 0 command, we can then install the apk and execute it without encountering any issues.","The am(Activity manager) is used to start the MainActivity of our meterpreter payload.","Finally we got the meterpreter shell. This shell is persistent, whenever the user reboot their device both the nc reverse shell and meterpreter is loaded. All we need to do is keep the listener open.","Meterpreter Success"]},{"l":"Assessing the Malicious module","p":["Assessing module is pretty easy, we just need to extract the module zip file. Since our example module only have shell scripts, it won't be hard to detect. But like I said before, with magisk modules we can change system files, which includes libraries, binaries etc. So finding malicious binaries and libraries would be quite hard and would require great reversing skills."]},{"l":"Reliable sources for downloading Magisk modules","p":["This attack scenario could be real, As you can see there were literally no IOC a normal user can detect. Only chances would be, if the threat actor download all data, then the user can notice increased data usage and act accordingly. But if the attacker is patient enough, then everything will be compromised.","So here are some reliable and safe places where you can download Magisk modules :-","Github","Fox's Magisk Module Manager","XDA Forums","Official Device community and development groups in Telegram"]},{"l":"Conclusion","p":["In conclusion, installing Magisk modules from unknown sources comes with a significant risk that cannot be ignored. Its better to install only essential modules than installing every module you see online. Also checking whats inside the module would be definitely a good practice, when its not from official module github repo and likewise."]}]]